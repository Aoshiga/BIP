model HelloPackage

import from "HelloPackage.cpp" {

    condition FirstHello(HELLO)
    condition MiddleHello(HELLO)
    condition LastHello(HELLO)

    structure HelloPackageMap {
        void assign(HelloPackageMap)
        const bool isFirst(Node)
        const bool isLast(Node)
        void print()
    }

    addressing HelloPackageAddressing {
        const HELLO findFirstHello(HelloPackageMap)
        const HELLO findLastHello(HelloPackageMap)
        const HELLO[] getAllHello()
    }
}

motif HelloPackage<HelloPackageMap, HelloPackageAddressing> { /*DefaultAddressing*/
    rule interaction firstSayHello(HELLO h, HELLO[] all)
    when((C.size() > 1) && S.isFirst(@h), all != h) {
        new Alone(h)
    }
}

/*global rule DoSomethingIMR(HelloPackage hp)
when(true){
    alone(hp.C.findFirstHello())
}*/

initializer {
    hi = new HelloPackage()

    for(i : seq(0, 100)) {
        newHello = new HELLO(i)

        node = hi.S.create()
        hi.@.bind(newHello, node)
        hi.S.insert(node)

        (HELLO FROM hi.C).insert(newHello)
    }
}